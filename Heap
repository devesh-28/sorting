public class Heapsort {
    int[]harr;
    int heapsize;
    int capacity;
    Heapsort(int capacity)
    {
        harr=new int[capacity];
        this.capacity=capacity;
        heapsize=0;
    }
    int parent(int i)
    {
        return (i-1)/2;
    }

    void insert(int k)
    {
        if(heapsize==capacity)
        {
            System.out.println("Overflow");
            return;
        }
        heapsize++;
        int i=heapsize-1;
        harr[i]=k;
        while(i!=0 && harr[parent(i)]>harr[i])
        {
          int temp=harr[i];
          harr[i]=harr[parent(i)];
          harr[parent(i)]=temp;
          i=parent(i);

        }
    }
    int extractmin(){
        if (heapsize==0)
        {
            System.out.println("Heap is empty");
            return Integer.MAX_VALUE;
        }
        else if(heapsize==1){
            heapsize--;
            return harr[0];
        }
        else
        {
            int root;
            root=harr[0];
            harr[0]=harr[heapsize-1];
            heapsize--;
            MinHeapify(0);
            return root;

        }
    }
    int left(int i)
    {
        return 2*i+1;
    }
    int right(int i)
    {
        return 2*i+2;
    }
    void MinHeapify(int i) {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heapsize && harr[l] < harr[i])
            smallest = l;
        if (r < heapsize && harr[r] < harr[smallest])
            smallest = r;
        if (smallest != i) {
            int temp=harr[i];
            harr[i]=harr[smallest];
            harr[smallest]=temp;
            MinHeapify(smallest);
        }
    }

    public void print()
    {
        for (int i = 0; i <heapsize ; i++) {

            System.out.println(harr[i]);

        }
    }


    public static void main(String[] args) {
        Heapsort h=new Heapsort(15);
        h.insert(5);
        h.insert(3);
        h.insert(17);
        h.insert(10);
        h.insert(84);
        h.insert(19);
        h.insert(6);
        h.insert(22);
        h.insert(9);
        h.print();
        h.extractmin();
        h.extractmin();
        System.out.println(" ");
        h.print();
    }


}
